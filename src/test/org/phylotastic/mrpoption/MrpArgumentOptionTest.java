package org.phylotastic.mrpoption;

import java.io.*;
import org.ini4j.Ini;
import org.apache.commons.cli.*;
import org.apache.commons.cli.Option;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author ...
 */
public class MrpArgumentOptionTest {
    private static File configFile;
    
    public MrpArgumentOptionTest() {
    }
    
    @BeforeClass
    public static void setUpClass() throws IOException {
        //  create a config.ini file
        configFile = createIni("unitTest" + File.separator + "config.ini");
    }
    
    /**
     *
     * @param _name
     * @return
     * @throws IOException
     */
    public static File createIni(String _name) throws IOException {
        File iniFile = createFile(_name);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(iniFile))) {
            writeIni(writer);
        } catch (IOException e) {
            throw e;
        }
        return iniFile;
    }
    
    /**
     *
     * @param _name
     * @return
     * @throws IOException
     */
    public static File createFile(String _name) throws IOException {
        File file = new File(_name);
        File dir = file.getParentFile();
        if (!dir.exists()) dir.mkdir();
        if (file.exists()) file.delete();
        file.createNewFile();
        return file;
    }
    
    /**
     *
     * @param writer
     * @throws IOException
     */
    public static void writeIni(BufferedWriter writer) throws IOException {
        writer.write("; Config file for program MapReducePruner");
        writer.newLine();
        writer.write("; Generated by and for unit tests");
        writer.newLine();
        writer.newLine();
        writer.write("[main]");
        writer.newLine();
        writer.write("input     = input.txt");
        writer.newLine();
        writer.write("temp      = temp");
        writer.newLine();
        writer.write("output    = output.txt");
        writer.newLine();
        writer.newLine();
        writer.write("; [data] section specifies defaults");
        writer.newLine();
        writer.write("[data]");
        writer.newLine();
        writer.write("rootDir   = data");
        writer.newLine();
        writer.write("dataDir   = data_phylomatictree");
        writer.newLine();
        writer.write("hashDepth = 4");
        writer.newLine();
        writer.write("tree      = http://www.evoio.org/wg/evoio/images/9/9c/Phylomatictree.nex");
        writer.newLine();
        writer.newLine();
        writer.write("[http://www.evoio.org/wg/evoio/images/9/9c/Phylomatictree.nex]");
        writer.newLine();
        writer.write("dataDir   = file_phylomatictree");
        writer.newLine();
        writer.write("hashDepth = 4");
        writer.newLine();
    }
    
    @AfterClass
    public static void tearDownClass() {
//        if (configFile.exists())
//            configFile.delete();
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of constructor, of class MrpArgumentOption.
     */
    @Test
    public void testConstructor_0args() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testConstructor1()");
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        String result = instance.toString();
        String expResult = "Option: " + ": not specified" + "; not specified";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
    }

    /**
     * Test of constructor, of class MrpArgumentOption.
     */
    @Test
    public void testConstructor_6args() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testConstructor2()");
        MrpArgumentOption instance = new MrpArgumentOption(
                "description", "short", "long","argument", "section", "key");
        assertNotNull(instance);
        String result = instance.toString();
        String expResult = "Option: -short, -long / [section]key: argument; description";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
    }

    /**
     * Test of setProperties method, of class MrpArgumentOption.
     */
    @Test
    public void testSetProperties_6args() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetProperties_6args()");
        String _description = "description";
        String _shortOption = "short";
        String _longOption = "long";
        String _argumentName = "argument";
        String _iniSection = "section";
        String _iniName = "key";
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_description, _shortOption, _longOption, _argumentName, _iniSection, _iniName);
        String result = instance.toString();
        String expResult = "Option: -short, -long / [section]key: argument; description";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
    }

    /**
     * Test of setProperties method, of class MrpArgumentOption.
     */
    @Test
    public void testSetProperties_4args() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetProperties_4args()");
        String _description = "description";
        String _shortOption = "short";
        String _longOption = "long";
        String _argumentName = "argument";
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_description, _shortOption, _longOption, _argumentName);
        String result = instance.toString();
        String expResult = "Option: -short, -long: argument; description";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
    }

    /**
     * Test of setProperties method, of class MrpArgumentOption.
     */
    @Test
    public void testSetProperties_2args() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetProperties_2args()");
        String _description = "description";
        String _shortOption = "short";
        String _longOption = "long";
        String _argumentName = "argument";
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_description, _shortOption, _longOption, _argumentName);
        String result = instance.toString();
        String expResult = "Option: -short, -long: argument; description";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        
        String _iniSection = "section";
        String _iniName = "key";
        instance.setProperties(_iniSection, _iniName);
        result = instance.toString();
        expResult = "Option: -short, -long / [section]key: argument; description";
        System.out.println("  -");
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
    }

    /**
     * Test of getOption method, of class MrpArgumentOption.
     */
    @Test
    public void testGetOption() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testGetOption()");
        String _description = "path to input file";
        String _shortOption = "i";
        String _longOption  = "input";
        String _argumentName = "file path";
        
        OptionBuilder.withDescription(_description);
        OptionBuilder.hasArg();
        OptionBuilder.withArgName(_argumentName);
        OptionBuilder.withLongOpt(_longOption);
        Option cliOption = OptionBuilder.create(_shortOption);
        
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_description, _shortOption, _longOption, _argumentName);
        String result = instance.toString();
        String expResult = "Option: -i, -input: file path; path to input file";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        Option mrpOption = instance.getOption();
        assertNotNull(mrpOption);
        System.out.println("  -");
        System.out.println("  expResult = " + true);
        System.out.println("  result    = " + cliOption.equals(mrpOption));
        assertEquals(cliOption, mrpOption);
    }

    /**
     * Test of setOption method, of class MrpArgumentOption.
     * @throws java.lang.Exception
     */
    @Test
    public void testSetOption_Ini() throws Exception {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetOption_Ini()");
        String _iniSection = "main";
        String _iniName = "input";
        String _argumentValue = "input.txt";
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_iniSection, _iniName);
        String result = instance.toString();
        String expResult = "Option:  / [main]input: not specified; not specified";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        /* get an ini4j inifile object for the ini file */
        Ini configIni = new Ini(configFile);
        assertNotNull(configIni);
        String item = configIni.get(_iniSection, _iniName);
        assertNotNull(item);
        System.out.println("  -");
        System.out.println("  expResult = " + _argumentValue);
        System.out.println("  result    = " + item);
        assertEquals(_argumentValue, item);
        instance.setOption(configIni);
        System.out.println("  -");
        System.out.println("  expResult = " + _argumentValue);
        System.out.println("  result    = " + instance.getValue());
        assertEquals(_argumentValue, instance.getValue());
    }

    /**
     * Test of setOption method, of class MrpArgumentOption.
     * @throws java.lang.Exception
     */
    @Test
    public void testSetOption_CommandLine() throws Exception {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetOption_CommandLine()");
        String _description = "path to input file";
        String _shortOption = "i";
        String _longOption  = "input";
        String _argumentName = "file path";
        String _argumentValue = "input.txt";
        
        // create an MrpArgumentOption
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_description, _shortOption, _longOption, _argumentName);
        String result = instance.toString();
        String expResult = "Option: -i, -input: file path; path to input file";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        
        // create a cli Options object
        Option mrpOption = instance.getOption();
        assertNotNull(mrpOption);
        Options options = new Options();
        options.addOption(mrpOption);
        
        // create an args stringarray
        String[] args = new String[2];
        args[0] = "-" + _shortOption;
        args[1] = _argumentValue;
        
        // create cli command line parser
        CommandLineParser parser = new BasicParser();
        assertNotNull(parser);
        try {
            // parse the command line arguments
            CommandLine cmdLine = parser.parse( options, args );
            // process the command line
            System.out.println("  -");
            System.out.println("  expResult = " + true);
            System.out.println("  result    = " + cmdLine.hasOption(_shortOption));
            assertTrue(cmdLine.hasOption(_shortOption));
            System.out.println("  -");
            System.out.println("  expResult = " + _argumentValue);
            System.out.println("  result    = " + cmdLine.getOptionValue(_shortOption));
            assertEquals(_argumentValue, cmdLine.getOptionValue(_shortOption));
            instance.setOption(cmdLine);
            String mrpValue = instance.getValue();
            System.out.println("  -");
            System.out.println("  expResult = " + _argumentValue);
            System.out.println("  result    = " + mrpValue);
            assertEquals(_argumentValue, mrpValue);
        }
        catch (Exception exp) {
            System.out.println( "MrpArgumentOptionTest: Command line error: " + exp.getMessage() );
            throw exp;
        }
    }

    /**
     * Test of setOption method, of class MrpArgumentOption.
     * @throws java.lang.Exception
     */
    @Test
    public void testSetOption_Ini_CommandLine() throws Exception {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetOption_Ini_CommandLine()");
        String _description = "path to input file";
        String _shortOption = "i";
        String _longOption  = "input";
        String _argumentName = "file path";
        String _iniSection = "main";
        String _iniName = "input";
        String _argumentValue = "input.txt";
        
        // create an MrpArgumentOption
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        instance.setProperties(_description, _shortOption, 
                _longOption, _argumentName, _iniSection, _iniName);
        String result = instance.toString();
        String expResult = "Option: -i, -input / [main]input: file path; path to input file";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        
        // get an ini4j inifile object for the ini file
        Ini configIni = new Ini(configFile);
        assertNotNull(configIni);
        String item = configIni.get(_iniSection, _iniName);
        assertNotNull(item);
        System.out.println("  -");
        System.out.println("  expResult = " + _argumentValue);
        System.out.println("  result    = " + item);
        assertEquals(_argumentValue, item);
        
        // create a cli Options object
        Option mrpOption = instance.getOption();
        assertNotNull(mrpOption);
        Options options = new Options();
        options.addOption(mrpOption);
        
        // create an args stringarray
        String[] args = new String[2];
        args[0] = "-" + _shortOption;
        args[1] = "input.tax";
        
        // create cli command line parser
        CommandLineParser parser = new BasicParser();
        assertNotNull(parser);
        try {
            // parse the command line arguments
            CommandLine cmdLine = parser.parse( options, args );
            // process the command line
            System.out.println("  -");
            System.out.println("  expResult = " + true);
            System.out.println("  result    = " + cmdLine.hasOption(_shortOption));
            assertTrue(cmdLine.hasOption(_shortOption));
            expResult = "input.txt";
            System.out.println("  -");
            System.out.println("  expResult = " + expResult);
            System.out.println("  result    = " + configIni.get(_iniSection, _iniName));
            assertEquals(expResult, configIni.get(_iniSection, _iniName));
            expResult = "input.tax";
            System.out.println("  -");
            System.out.println("  expResult = " + expResult);
            System.out.println("  result    = " + cmdLine.getOptionValue(_shortOption));
            assertEquals(expResult, cmdLine.getOptionValue(_shortOption));
            instance.setOption(configIni, cmdLine);
            String mrpValue = instance.getValue();
            System.out.println("  -");
            System.out.println("  expResult = " + expResult);
            System.out.println("  result    = " + mrpValue);
            assertEquals("input.tax", mrpValue);
        }
        catch (Exception exp) {
            System.out.println( "MrpArgumentOptionTest: Command line error: " + exp.getMessage() );
            throw exp;
        }
    }

    /**
     * Test of setValue method, of class MrpArgumentOption.
     */
    @Test
    public void testSetValue() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testSetValue()");
        MrpArgumentOption instance = new MrpArgumentOption(
                "description", "short", "long","argument", "section", "key");
        assertNotNull(instance);
        String _value = "value";
        instance.setValue(_value);
        System.out.println("  expResult = " + _value);
        System.out.println("  result    = " + instance.getValue());
        assertEquals(_value, instance.getValue());
    }

    /**
     * Test of checkValue method, of class MrpArgumentOption.
     */
    @Test
    public void testCheckValue1() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testCheckValue1()");
        MrpArgumentOption instance = new MrpArgumentOption(
                "description", "short", "long","argument", "section", "key");
        assertNotNull(instance);
        instance.setValue("value");
        instance.checkValue();
        System.out.println("  result    = OK");
    }

    /**
     * Test of checkValue method, of class MrpArgumentOption.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testCheckValue2() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testCheckValue2()");
        MrpArgumentOption instance = new MrpArgumentOption(
                "description", "short", "long","argument", "section", "key");
        assertNotNull(instance);
        instance.checkValue();
        System.out.println("  result    = Not OK");
    }

    /**
     * Test of getValue method, of class MrpArgumentOption.
     */
    @Test
    public void testGetValue() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testGValue1()");
        MrpArgumentOption instance = new MrpArgumentOption(
                "description", "short", "long","argument", "section", "key");
        assertNotNull(instance);
        String _value = "";
        instance.setValue(_value);
        System.out.println("  expResult = " + _value);
        System.out.println("  result    = " + instance.getValue());
        assertEquals(_value, instance.getValue());
        _value = "value";
        instance.setValue(_value);
        System.out.println("  -");
        System.out.println("  expResult = " + _value);
        System.out.println("  result    = " + instance.getValue());
        assertEquals(_value, instance.getValue());
        _value = "";
        instance.setValue(_value);
        System.out.println("  -");
        System.out.println("  expResult = " + _value);
        System.out.println("  result    = " + instance.getValue());
        assertEquals(_value, instance.getValue());
    }

    /**
     * Test of toString method, of class MrpArgumentOption.
     */
    @Test
    public void testToString() {
        System.out.println();
        System.out.println("* MrpArgumentOptionTest: testToString()");
        MrpArgumentOption instance = new MrpArgumentOption();
        assertNotNull(instance);
        String result = instance.toString();
        String expResult = "Option: " + ": not specified" + "; not specified";
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        instance.setProperties("description", "short", "long","argument");
        result = instance.toString();
        expResult = "Option: -short, -long: argument; description";
        System.out.println("  -");
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
        instance.setProperties("section", "key");
        result = instance.toString();
        expResult = "Option: -short, -long / [section]key: argument; description";
        System.out.println("  -");
        System.out.println("  expResult = " + expResult);
        System.out.println("  result    = " + result);
        assertEquals(expResult, result);
    }
    
}
